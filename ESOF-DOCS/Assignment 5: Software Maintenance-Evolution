Devido a extensão do código do openClinica, restringimos a analise do código apenas ao directório WS.
Seria possível computar as métricas do directório Web e Core, alterando o ficheiro de configuração betterCodeHub.yml, contudo
seria necessário uma primeira análise para posterior configuração através dos "settings". Através de criação manual do ficheiro
betterCodeHub.yml obtivemos sempre a mesma mensagem; número de linhas excede as 100k.

Das dez métricas existentes no betterCodeHub.com, na analise do directório <WS>, não obtivemos a verde os seguintes pontos:
   - Keep Architecture Balanced;
   - Automate Tests.
   
   Aqui salientamos que o software não identificou o directório de testes; produção de linhas de teste: 0 e linhas de teste: 0.
   Contudo existe o directório: OpenClinica/ws/src/test, que eventualmente devia ser reconhecido pelo sistema. 
   Esta informação pode e foi "forçada" através do ficheiro de configuração betterCodeHub.yml, contudo não houve alterações
   ao reconhecimento do directório de testes.
   Das vezes em que utilizamos o software (betterCodeHub), a analise não chegava a ser executada totalmente, fincando bloqueada.
    
A nossa sugestão para evolução (funcionalidade) é efectuar o  controle de concorrência, ou seja bloquear a edição de "formulários"
que possuam a relação de um para muitos (na vista lógica de arquitectura de 1..n)

Este é um tema que é apontado no forum do OpenClinica, na platadorma Jira, nas funcionalidades a serem desenvolvidas. Esta funcionalidade
é importante porque pode aconteçer que um utilizador/médico/investigador esteja a editar sobre informação que já tenha sofrido "update"
(actualizações).
Como a edição de um estudo vai implicar escrever em várias tabelas, sugerimos que a implementação faça recurso de uma tabela
que poderá ser chamanda de LOCKS_FUNCOES. Nesta tabela, e para o caso do estudos,
será gravado o nome do processo a ser bloqueado, neste caso "STUDIES", ID do <Study>, login do utilizador e hora do sistema.
A chave da tabela será dupla e será composta pelo nome do lock  da função e por uma ID.

Para o caso do estudos e para cada vez que um estudo é visualizado/editado é gravado um na tabela LOCKS_FUNCOES essa informação.
      
      Cenários de uso do "LOCK" <STUDY>: 
      -  Um utilizador visualiza informação e outro utilizador tenta gravar sem ter decorrido um time-out (diferença entre a hora do
         sistema e a hora registado no LOCKS_FUNCOES:
            O segundo utlizador recebe a informação que a função está bloqueada;
      -  Um utilizador visualiza informação e outro utlizador tenta gravar depois de decorrido o time-out:
            O registo do 1ª utilizador é apagado e gravado um novo registo para o 2º utilizador;
            Se o 2º utilizador fizer update ao estudo, se o 1º utilizador tentar fazer update ao estudo receberá a informação
            que a informação que pretende actualizar já foi alterada por outro utilizador, sendo também efectuado um refresh 
            da informações visualizadas nos "forms";
       -  No caso insert/update é suposto que o lock esteja activo para que se possa efectuar commit.
            
A função (metódo) para bloquear uma função dever ser global, visto ser usado por vários formulários da aplicação. Com parametros
de entrada da função teremos o nome do lock que estamos a bloquear (String), login (String) e chaveLoc (String).
A função será chamada em todos os formulários que façam recurso de tabelas que utilizam a relação 1..*. Salientamos como foi
referido acima o caso do <STUDY>.
        
        Passos do desenvolvimento:
        - Execução do funcão bool bloqueia_funcao(string, string, string);
          - Quando a função retonar false a mensagem de erro d
        - Execução da função bool desbloqueia_funcao(string, String, String);
        - "Call" de função cada vez que chamamos um estudo (para visualização/edição);

